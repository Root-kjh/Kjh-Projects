{"version":3,"sources":["components/ProjectCard.js","App.js","serviceWorker.js","index.js"],"names":["ProjectCard","props","Card","className","CardContent","Typography","variant","component","title","color","backend","db","etc","CardActions","href","link","Button","size","App","useEffect","document","id","map","project","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAQe,SAASA,EAAYC,GAClC,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,WACd,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAChCN,EAAMO,OAET,kBAACH,EAAA,EAAD,CAAYI,MAAM,iBACfR,EAAMS,QADT,MACqBT,EAAMU,IAE3B,kBAACN,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,KACnCN,EAAMW,MAGX,kBAACC,EAAA,EAAD,KACE,uBAAGC,KAAMb,EAAMc,MAAM,kBAACC,EAAA,EAAD,CAAQC,KAAK,SAAb,WCuCdC,MA1Df,WA+CE,OAJAC,qBAAU,WACRC,SAASZ,MAAQ,kBAIjB,yBAAKa,GAAG,OA/CO,CACf,CACEb,MAAQ,WACRE,QAAU,aACVC,GAAK,QACLC,IAAM,6KACNG,KAAO,kDAGT,CACEP,MAAQ,cACRE,QAAU,SACVC,GAAK,iBACLC,IAAM,mJACNG,KAAO,iDAGT,CACEP,MAAO,kBACPE,QAAU,QACVC,GAAI,eACJC,IAAM,qBACNG,KAAO,gDAGT,CACEP,MAAO,sBACPE,QAAS,SACTC,GAAI,eACJC,IAAK,qBACLG,KAAM,mDAGR,CACEP,MAAO,sBACPE,QAAS,gBACTC,GAAI,eACJC,IAAK,8HACLG,KAAM,kDAWKO,KAAI,SAAAC,GACX,OAAO,kBAACvB,EAAD,CAAawB,IAAKD,EAAQf,MAAOA,MAAOe,EAAQf,MAAOE,QAASa,EAAQb,QAASC,GAAIY,EAAQZ,GAAIC,IAAKW,EAAQX,IAAKG,KAAMQ,EAAQR,YC3C9HU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFZ,SAASa,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.132d27fe.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nexport default function ProjectCard(props) {\r\n  return (\r\n    <Card className=\"project\">\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          {props.title}\r\n        </Typography>\r\n        <Typography color=\"textSecondary\">\r\n          {props.backend} | {props.db}\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          {props.etc}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <a href={props.link}><Button size=\"small\">View</Button></a>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}","import React,{useEffect} from 'react';\r\nimport './App.css';\r\nimport ProjectCard from './components/ProjectCard';\r\n\r\nfunction App() {\r\n  const PROJECTS = [\r\n    {\r\n      title : \"TodoList\",\r\n      backend : \"SpringBoot\",\r\n      db : \"MySQL\",\r\n      etc : \"간단한 기능을 구현하되, 코드의 가독성에 집중하며 만든 프로젝트\",\r\n      link : \"http://kjh-projects.kro.kr/todolist-springboot\"\r\n    },\r\n\r\n    {\r\n      title : \"RecruitList\",\r\n      backend : \"Spring\",\r\n      db : \"MySQL, MongoDB\",\r\n      etc : \"써보고 싶은 다양한 기술스택을 사용하며 만든 프로젝트\",\r\n      link : \"http://kjh-projects.kro.kr/recruitlist-spring\"\r\n    },\r\n    \r\n    {\r\n      title: \"SoldierMailAuto\",\r\n      backend : \"Flask\",\r\n      db: \"미정\",\r\n      etc : \"제작중\",\r\n      link : \"http://kjh-projects.kro.kr/soldier-mail-auto\"\r\n    },\r\n    \r\n    {\r\n      title: \"MemorialDayCalender\",\r\n      backend: \"Django\",\r\n      db: \"미정\",\r\n      etc: \"제작중\",\r\n      link: \"http://kjh-projects.kro.kr/memorialday-calender\"\r\n    },\r\n    \r\n    {\r\n      title: \"When-Should-I-dodge\",\r\n      backend: \"Express(node)\",\r\n      db: \"미정\",\r\n      etc: \"제작중(롤 전적 검색을 기반으로 한 닷지 판단 웹)\",\r\n      link: \"http://kjh-projects.kro.kr/when-shuld-i-dodge\"\r\n    }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    document.title = \"kjh-Projects\";\r\n  })\r\n\r\n  return (\r\n    <div id=\"App\">\r\n      {\r\n        PROJECTS.map(project => {\r\n          return <ProjectCard key={project.title} title={project.title} backend={project.backend} db={project.db} etc={project.etc} link={project.link}/>\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}